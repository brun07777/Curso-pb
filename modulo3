<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Módulo 2</title>

    <style>
        body {
            background-color: rgba(15, 15, 15, 1);
        }

        h1 {
            color: rgba(3, 224, 172, 1);
        }

        p {
            color: white;
            margin: 4px 0;
        }

        .exprogamas {
            background-color: rgba(0, 0, 0);
            color: rgba(3, 224, 172, 1);
        }

        label {
            color: rgba(3, 224, 172, 1);
        }

        h1 {
            font-family: "Audiowide", sans-serif;
        }

        h2 {
            color: white
        }

        h3 {
            color: white
        }

        button {
            border: 2px;
            border-radius: 16px;
            color: white;
            padding: 13px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            background-color: rgba(3, 224, 172, 1);
            font-family: "Audiowide", sans-serif;
        }

        table {
            border-collapse: collapse;
            width: 100%;
        }

        th,
        td {
            color: white;
            text-align: left;
            padding: 8px;
        }

        tr:nth-child(even) {
            background-color: #2a2727
        }

        th {
            background-color: #121111;
            color: white;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            background-color: rgba(15, 15, 15, 1);
            padding: 20px;
        }

        pre {
            text-align: left;
            background-color: #2d2d2d;
            color: #D4D4D4;
            padding: 3px;
            border-radius: 5px;
            font-size: 18px;
        }
        code {
            white-space: pre;
        }
    </style>
</head>

<body>
    <center>
        <video width="500" controls>
      <source src="41BD53FA-1945-4C03-A077-A2755633FCB8 (1).mp4 " type="video/mp4">
    </video>
        <h1>Módulo 3</h1>
    </center>
    <center>
        <h2>1. Buscas</h2>
    </center>
<center><h3>Busca Linear</h3></center>
<p>O programa abaixo realiza a busca linear em um vetor de tamanho definido pelo usuário:</p>
<pre><code>
n = int(input("Entre com um numero = "))
vetor=[]
for i in range(0, n+1):
    vetor.append(int(input(f"Entre com a posiçao{i} = ")))
for i in range(0,n+1):
    print(vetor[i])

cont=0
valor = int(input("Entre com o valor voce deseja buscar: "))
for i in range(0,n+1):
    if vetor[i] == valor:
        cont = cont + 1
        print(f"O valor {valor} foi encontrado na posição {i},")

print(f"O valor foi encontrado {cont} vezes")
    </code></pre>
<p>Explicação do código:</p>
<p>Primeiro é declarada uma variável para definir o tamanho do vetor, depois o usuário entre com os valores para o vetor, e então ele é impresso. Após isso o programa pede para que o usuário entre com o valor para ser buscado, após o valor ser inserido um laço é criado para varrer o vetor inteiro e se o valor for encontrado ele dirá quantas vezes foi encontrado e em qual posição por meio de um 'if'</p>
<center><h3>Busca Binária</h3></center>
<p>O programa abaixo realiza a busca binária em um vetor de tamanho definido pelo usuário:</p>
<pre><code>
n = int(input("Entre com um numero = "))
vet=[]
x=0
for i in range(n):
    ok=0
    valor = int(input(f"Entre com a posição {i} = "))
    while(ok==0):
        if valor in vet:
            print("Não é permitido ter posições com valores iguais")
            x=1
            valor = int(input(f"Entre com a posição {i} = "))
        else:
            vet.append(valor)
            ok=1

print("Vetor:\n")
for i in range(0,n):
    print(f"[{vet[i]}]",end=' ')

for i in range(0,n):
    for j in range(n-1,i,-1):
        if vet[i] > vet[j]:
            temp = vet[i]
            vet[i] = vet[j]
            vet[j] = temp
                
print("\nVetor ordenado:\n")
for i in range(0,n):
    print(f"[{vet[i]}]",end=' ')
    
ele = int(input("\nEntre com um numero = "))
l=0 
r=n-1
while(r>l):
    pos=int((l+r)/2)
    if(vet[pos]>ele):
        r=pos-1
    else:
        l=pos+1
    if vet[pos]==ele:
        print(f"O elemento {ele} foi encontrado na posição {pos} do vetor")
        r=l-1
    elif r==l:
        if vet[r]==ele:
            print(f"O elemento {ele} foi encontrado na posição {r} do vetor")
        else:
            print(f"O elemento {ele} não foi encontrado")
    </code></pre>
<p>Explicação do código:</p>
<p>A principal ideia da busca binária é encontrar o número que o usuário escolheu. Ele faz isso por meio de estimativas de onde o número está mas, para o programa fazer estas estimativas (chutes) ele precisa estar ordenado e não pode possuir números repetidos.</p>
<center>
    <h2>2. Ordenações</h2>
</center>
<center><h3>Permutação</h3></center>
<p>O programa abaixo realiza a permutação para ordenar um vetor de tamanho definido pelo usuário:</p>
<pre><code>n = int(input("Entre com um numero = "))
vet=[]
for i in range(0, n):
    vet.append(int(input(f"Entre com a posiçao{i} = ")))
for i in range(0,n):
    print(vet[i])
for i in range(0,n):
    for j in range(n-1,i,-1):
        if vet[i] > vet[j]:
            temp = vet[i]
            vet[i] = vet[j]
            vet[j] = temp
                
    print(f"Vetor ordenado fica assim:")
    for i in range(0,n):
        print(vet[i])
</code></pre>
<p>Explicação do código:</p>
<p>A permutação é uma das maneiras de ordenar um vetor. Para funcionar ele depende de dois laços (for) um que vai de 0 até n e outro de n até 0 eles seguem comparando valores um do outro e se estiver dentro da condição if eles fazem a troca e assim o vetor é ordenado.</p>
<center><h3>Seleção direta</h3></center>
<p>O programa abaixo realiza a seleção direta para ordenar um vetor de tamanho definido pelo usuário:</p>
<pre><code>n = int(input("Entre com um numero = "))
    vet=[]
    for i in range(0,n):
        vet.append(int(input(f"Entre com a posiçao{i} = ")))
    for i in range(0,n):
        print(vet[i])
    
    for i in range (0,n):
        k=i
        aux=vet[i]
        for j in range(i+1,n):
            if(vet[j] < aux):
                k=j
                aux=vet[k]
        vet[k]=vet[i]
        vet[i]=aux

    print(f"\nVetor ordenado por seleção direta:")
    for i in range(0,n):
        print(vet[i])
</code></pre>
<p>Explicação do código:</p>
<p>Seleção direta é um outro tipo de ordenção cujo a diferença é que o for do i vai "pegar" um valor do vetor e compará-lo com o resto do vetor para identificar em que posição ele precisa estar e faz isso até terminar o vetor.</p>
<center><h3>Inserção direta</h3></center>
<p>O programa abaixo realiza a inserção direta para ordenar um vetor de tamanho definido pelo usuário:</p>
<pre><code>n = int(input("Entre com a dimensão do vetor: "))
vetor=[]
for i in range(0, n):
    vetor.append(int(input(f"Entre com a posição {i} do vetor:  ")))
    print("Vetor não ordenado\n")

for i in range(0, n):
    print(f"[{vetor[i]}]",end=' ')

for i in range(1,n):
    x=vetor[i]
    j=i
    while j > 0 and x < vetor[j-1]:
        vetor[j]=vetor[j-1]
        j=j-1
        vetor[j]=x

print("\nVetor ordenado: \n")
for i in range(0, n):
    print(f"[{vetor[i]}]",end=' ')
</code></pre>
<p>Explicação do código:</p>
<p>A inserção direta funciona de maneira semelhante da seleção direta a diferença mais notável é que ao invés de utilizar um 'for' para comparar e trocar o valor fora da ordem ele utiliza um 'while' para fazer essa tarefa.</p>
<center><h3>Bolha</h3></center>
<p>O programa abaixo realiza bolha para ordenar um vetor de tamanho definido pelo usuário:</p>
<pre><code>n = int(input("Entre com um numero = "))
vet=[]
for i in range(0, n):
    vet.append(int(input(f"Entre com a posiçao{i} = ")))
for i in range(0,n):
    print(vet[i], end=' ')
    
ind2=n
troquei=1
while(troquei==1):
    troquei=0
    for i in range(0,ind2-1):
        if(vet[i]>vet[i+1]):
            aux = vet[i]
            vet[i] = vet[i+1]
            vet[i+1] = aux 
            troquei=1
        ind2 = ind2 - 1
    
print(f"\nVetor ordenado por bolha:")
for i in range(0,n):
    print(vet[i],end=' ')
</code></pre>
<p>Explicação do código:</p>
<p>Esta ordenação tem uma lógica parecida com a permutação cujo utiliza uma variável como consistência que espera a troca ocorrer para ordenar a próxima posição do vetor.</p>
<center>
    <h2>2. Ordenações Matriz</h2>
</center>
<center><h3>Linhas</h3></center>
<p>O programa abaixo realiza a permutação para ordenar as linhas de uma matriz de tamanho definido pelo usuário:</p>
<pre><code>import numpy as np
linhas = int(input("Digite o número de linhas: "))
colunas = int(input("Digite o número de colunas: "))
mat = np.zeros((linhas, colunas))
for i in range(linhas):
    for j in range(colunas):
        valor = int(input(f"Digite o valor para a posição [{i}][{j}]: "))
        mat[i, j] = valor
for i in range(linhas):
    print()
    for j in range(colunas):
        print(f"[{mat[i,j]}]",end=' ')
    
for k in range (0,linhas):
    for i in range (0,colunas):
        for j in range(linhas-1,i,-1):
            if (mat[k][i]>mat[k][j]):
                    aux = mat[k][i]
                    mat[k][i] = mat[k][j]
                    mat[k][j] = aux
    
print(f"\nMatriz com suas linhas ordenadas")
for i in range(linhas):
    print()
    for j in range(colunas):
        print(f"[{mat[i,j]}]",end=' ')
</code></pre>
<p>Explicação do código:</p>
<p>O código utiliza permutação para ordenar somente as linhas de uma matriz ele consegue fazer isso pois o seu if compara somente os valores presentes nas linhas para ordená-las.</p>
<center><h3>Colunas</h3></center>
<p>O programa abaixo realiza a permutação para ordenar as colunas de uma matriz de tamanho definido pelo usuário:</p>
<pre><code>import numpy as np
linhas = int(input("Digite o número de linhas: "))
colunas = int(input("Digite o número de colunas: "))
mat = np.zeros((linhas, colunas))
for i in range(linhas):
    for j in range(colunas):
        valor = int(input(f"Digite o valor para a posição [{i}][{j}]: "))
        mat[i, j] = valor

for i in range(linhas):
    print()
    for j in range(colunas):
        print(f"[{mat[i,j]}]",end=' ')
    
for k in range (0,colunas):
    for i in range (0,linhas):
        for j in range(linhas-1,i,-1):
            if (mat[i][k]>mat[j][k]):
                    aux = mat[i][k]
                    mat[i][k] = mat[j][k]
                    mat[j][k] = aux
    
print(f"\nMatriz com suas linhas ordenadas")
for i in range(linhas):
    print()
    for j in range(colunas):
        print(f"[{mat[i,j]}]",end=' ')
</code></pre>
<p>Explicação do código:</p>
<p>O código é extamente igual ao anterior mas sua diferença para ordenar as colunas da matriz pois o mesmo if de antes pega somente os valores presentes nas colunas.</p>
<center><h3>Ordenamento Completo da Matriz</h3></center>
<p>O programa abaixo realiza a permutação para ordenar uma matriz de tamanho definido pelo usuário:</p>
<pre><code>import numpy as np
linhas = int(input("Digite o número de linhas: "))
colunas = int(input("Digite o número de colunas: "))
mat = np.zeros((linhas, colunas))
for i in range(linhas):
    for j in range(colunas):
        valor = int(input(f"Digite o valor para a posição [{i}][{j}]: "))
        mat[i, j] = valor

for i in range(linhas):
    print()
    for j in range(colunas):
        print(f"[{mat[i,j]}]",end=' ')
    
vet=[]
for i in range(linhas):
    for j in range(colunas):
        vet.append(mat[i][j])
    
print(f"\nValores da matriz no vetor:")
for i in range(0,len(vet)):
    print(vet[i],end=' ')
    
for i in range(0,len(vet)):
    for j in range(len(vet)-1,i,-1):
        if vet[i] > vet[j]:
            temp = vet[i]
            vet[i] = vet[j]
            vet[j] = temp
    
print(f"\nValores da matriz no vetor ordenado:")
for i in range(0,len(vet)):
    print(vet[i],end=' ')
    
l=0
for i in range(linhas):
    for j in range(colunas):
        mat[i][j] = vet[l]
        l = l + 1
    
print(f"\nMatriz 100% ordenada")
for i in range(linhas):
    print()
    for j in range(colunas):
        print(f"[{mat[i,j]}]",end=' ')
</code></pre>
<p>Explicação do código:</p>
<p>Este programa é um pouco diferente dos demais pois ele joga os valores presentes na matris e transfere eles para um vetor. Após isso este vetor é ordenado por permutação e depois disso os valores ordenados são jogados de volta para a matriz deixando-a ordenada</p>
